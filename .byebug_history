c!
c
exit
exi
Schedule.schedule.destroy
schedule.destroy
schedule
date
exit
date
schedule = Schedule.where(stopover_day: date)
n
c!
date
exit
date
exit
schedule
c
n
schedule
date
schedule
schedulr
exit
n
c
exit
last_month
n
exit
n
total_days_in_next_month
n
next_month
n
exit
c!
exit
assistent
exit
assistent
teacher
n
c
exit
teacher
exit
teacher
n
c
n
 Schedule.where(teacher: teacher.name)
if Schedule.where(teacher: teacher.name).count <= 2
n
exit
 Schedule.where(teacher: teacher_name).count
 if Schedule.where(teacher: teacher_name).count <= 2
teacher
n
c
n
exit
n
c
n
c
n
teacher_count
n
teacher_count
c
n
exit
usuario
n
c
n
c!
c
n
c!
c
c!
c
n
c!
c
c!
c
first_sunday
n
date
n
c
date
n
c
date
n
date
c
date
n
date
c
n
date
n
date
day
first_sunday
c
n
first_sunday
first_day
n
c
exit
c
first_sunday
n
c!
c
date
users
c
users
c
users
c
users
c
c!
c
n
users.where(preferred_class: 'Babies')
users
exit
morning_users
c
n
exit
c
n
c
n
c
date
exit
c
date
c
teacher_pre1
teacher_pre1.name
teacher
c
teacher_babies.id
teacher_babies
c
v
n
c!
c
Schedule.create(teacher_name: teacher_pre2.name, teacher_id: teacher_pre2.id,assistent_name: assistent_pre2.name, assistent_id: assistent_pre2.id,leader_name: leader_morning.name, leader_id: leader_morning.id, assistent_leader: assistent_leader_morning.name, lesson_title: Lesson.last.title,lesson_id: Lesson.last.id, stopover_day: date)
Schedule.all
Schedule.create(teacher_name: teacher_pre2.name, teacher_id: teacher_pre2.id,assistent_name: assistent_pre2.name, assistent_id: assistent_pre2.id,leader_name: leader_morning.name, leader_id: leader_morning.id, assistent_leader: assistent_leader_morning.name, lesson_title: Lesson.last.title,lesson_id: Lesson.last.id, stopover_day: date)
                      lesson_id: Lesson.last.id, stopover_day: date)
                      assistent_leader: assistent_leader_morning.name, lesson_title: Lesson.last.title,
                      leader_name: leader_morning.name, leader_id: leader_morning.id,
                      assistent_name: assistent_pre2.name, assistent_id: assistent_pre2.id,
Schedule.create(teacher_name: teacher_pre2.name, teacher_id: teacher_pre2.id,
Schedule.all
c
n
exit
   46:                       assistent_leader: assistent_leader_morning, stopover_day: date)
Schedule.create(teacher_name: teacher_kids1.name, assistent_name: assistent_kids1, leader_name: leader_morning,
c
_assistent_babies
n
_teacher_babies
n
c
n
c
exit
days_in_next_month.month
days_in_next_month.month <= total_days_in_next_month
c
total_days_in_next_month
days_in_next_month
c
days_in_next_month
c
c!
c
days_in_next_month
total_days_in_next_month
c
n
c
n
current_day
c
n
days_in_next_month
total_days_in_next_month
c
preferred_class
exit
preferred_class
c
PreferredDay.find_by(description: preferred_day)
preferred_day
c
PreferredDay.new.class
PreferredDay.new.clas
PreferredDay.find_by(description: preferred_day)
preferred_day
c
exit
preferred_day.class
preferred_day
c
n
TypeProfile.find_by(description: profile)
c
relo
TypeProfile.all.pluck(:description)
TypeProfile.all.pluck(:descripition)
TypeProfile.all
TypeProfile.find_by(description: profile)
c
TypeProfile.find_by(description: profile)
c
TypeProfile.find_by(description: profile)
c
TypeProfile.find_by(description:"LÃ­der e Professor")
profile
c
TypeProfile.all
TypeProfile.find_by(descripition: profile)
profile
c
name
exit
c
TypeProfile.find_by(description: profile)
TypeProfile.all
TypeProfile.find_by(description: :profile)
profile
c
TypeProfile.find_by(description: :prof)
TypeProfile.find_by(description: :profile)
TypeProfile.find_by(:profile)
